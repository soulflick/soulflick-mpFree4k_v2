<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" x:Class="StandardStyles">

    <Style x:Key="columnHeaderStyleProgrammatical" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="BorderThickness" Value="0,0,0.8,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="{DynamicResource MainGradientDarkColor}" Offset="0"/>
                    <GradientStop Color="{DynamicResource MainGradientLightColor}" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
        <Setter Property="Padding" Value="5,2,4,2"/>
    </Style>

    <Style TargetType="{x:Type ListView}">
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource MenuBackground}"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource MenuBackground}"/>
       
    </Style>

    <Style x:Key="playlistLabel" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsPlaying, UpdateSourceTrigger=PropertyChanged}" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ResourceKey=SelectedItemForegroundBrush}"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPlaying}" Value="False" />
                                <Condition Binding="{Binding IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource MenuTextAlternativeBrush}"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPlaying}" Value="False" />
                                <Condition Binding="{Binding Path=ListViewItem.IsMouseOver}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
                        </MultiDataTrigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource MenuTextAlternativeBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource MenuBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextColor}"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="11"/>
    </Style>


    <Style
      TargetType="{x:Type GroupBox}">
        <Setter Property="Margin" Value="5,1,5,7"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Border Grid.Row="0"
              BorderThickness="1"
              BorderBrush="#25A0DA"
              Background="#25A0DA">
                            <Label Foreground="White">
                                <ContentPresenter Margin="4"
                          ContentSource="Header"
                          RecognizesAccessKey="True" />
                            </Label>
                        </Border>

                        <Border Grid.Row="1"
              BorderThickness="1,0,1,1"
              BorderBrush="#25A0DA">
                            <ContentPresenter Margin="4" />
                        </Border>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource DataGridAlternatingBackgroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource ControlDarkBrush}"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource HorizontalGridLinesBrush}"/>
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource VerticalGridLinesBrush}"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
        <Setter Property="RowHeaderWidth" Value="0"/>
    </Style>

    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Content"
              Value="{Binding Title}" />
    </Style>

    <Style TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected"  Value="True">
                <Setter Property="Background" Value="{DynamicResource SelectedItemBackgroundBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource SelectedItemForegroundBrush}"/>
            </Trigger>
            <DataTrigger Binding="{Binding HandleError}" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="Foreground" Value="White"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="{DynamicResource ControlDarkBrush}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="dataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <Trigger Property="IsSelected"  Value="True">
                <Setter Property="Background" Value="{DynamicResource ControlLightBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource SelectedItemForegroundBrush}"/>
            </Trigger>
            <DataTrigger Binding="{Binding HandleError}" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="Foreground" Value="White"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource ControlDarkBrush}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Margin" Value="2,1,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="dataGridTextColumnAlternativeElementStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextAlternativeBrush}"/>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.TextDecorations" Value="Underline"/>
                <Setter Property="Foreground" Value="{DynamicResource SelectedItemForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="TextBlock.TextDecorations" Value="None"/>
                <Setter Property="Foreground" Value="{DynamicResource MenuTextAlternativeBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="dataGridTextColumnElementStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.TextDecorations" Value="Underline"/>
                <Setter Property="Foreground" Value="{DynamicResource SelectedItemForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="TextBlock.TextDecorations" Value="None"/>
                <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--<Style TargetType="{x:Type DataGridTextColumn}">
        <Setter Property="ElementStyle" Value="{DynamicResource dataGridTextColumnElementStyle}"/>
    </Style>-->

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{DynamicResource ControlMediumBrush}"/>
    </Style>


    <Style TargetType="{x:Type TreeViewItem}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="{DynamicResource SelectedItemForegroundColor}" />
        </Style.Resources>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="{DynamicResource MenuTextColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="IsExpanded" Value="{Binding IsNodeExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsNodeSelected, Mode=TwoWay}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{DynamicResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="Bd" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Grid.Column="1">
                            <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource SelectedBorderBrush}"/>
                <Setter Property="Background" Value="{DynamicResource SelectedItemBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource SelectedItemFouregroundBrush}"/>
            </Trigger>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

        <!--<EventSetter Event="MouseDoubleClick" Handler="TVOnItemMouseDoubleClick" />
                                            <EventSetter Event="MouseDown" Handler="TVOnItemMouseDown"/>-->
    </Style>


    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
                        <Path x:Name="ExpandPath" Fill="{DynamicResource TreeViewItemToggleButtonBackgroundBrush}" Stroke="{DynamicResource TreeViewItemToggleButtonBorderBrush}" Data="{StaticResource TreeArrow}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItemToggleButtonBorderBrush}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItemToggleButtonBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource TreeViewItemToggleButtonBackgroundBrush}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource TreeViewItemToggleButtonBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabPanel}">
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="{DynamicResource ControlDarkBrush}"/>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border x:Name="grid">
                        <ContentPresenter>
                            <ContentPresenter.Content>
                                <TextBlock x:Name="content" Margin="1" FontSize="{DynamicResource FontSizeBiggest}" Text="{TemplateBinding Content}"/>
                            </ContentPresenter.Content>
                            <!--<ContentPresenter.LayoutTransform>
                                <RotateTransform Angle="270" />
                            </ContentPresenter.LayoutTransform>-->
                        </ContentPresenter>
                    </Border>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="True">
                            <Setter TargetName="content" Property="TextDecorations" Value="Underline"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsMouseOver}" Value="True">
                            <Setter TargetName="content" Property="TextDecorations" Value="Underline"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid Name="Panel" Margin="0,0,0,0">
                        <Border BorderThickness="0.5" BorderBrush="{DynamicResource ControlBorderBrush}" Padding="10,2,10,2"
                                Background="{DynamicResource ControlMediumBrush}">
                            <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="0"/>
                        </Border>
                    </Grid>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ControlLightBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
                            <Setter Property="BorderBrush" Value="Gray"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ControlMediumBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
                            <Setter TargetName="Panel" Property="Opacity" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="TextDecorations" Value="Underline"/>
                            <Setter TargetName="Panel" Property="Background" Value="{DynamicResource ControlDarkBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource MenuTextBrush}"/>
                            <Setter TargetName="Panel" Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Foreground" Value="{DynamicResource ResourceKey=ControlLightBrush}"/>
        <Setter Property="Background" Value="{DynamicResource ResourceKey=ControlDarkBrush}"/>-->
        <Setter Property="FontSize" Value="13"/>
        <!--<Setter Property="Visibility" Value="Visible"/>-->
    </Style>

    <Style TargetType="TabItem" x:Key="tabItemStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid Name="Panel" Margin="-4,0,0,0">
                        <Border BorderThickness="0" BorderBrush="Gray" Padding="10,4,10,3">
                            <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="0"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="{DynamicResource SelectedItemBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Panel" Property="Background" Value="{DynamicResource SelectedItemBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!--<Setter TargetName="Panel" Property="Background" Value="#EEEEEE" />-->
                            <Setter Property="Opacity" Value="0.8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Visibility" Value="Visible"/>-->
    </Style>

</ResourceDictionary>